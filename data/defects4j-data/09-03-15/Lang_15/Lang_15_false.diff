diff --git a/home/dericp/workspace/Lang_15_buggy/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/home/dericp/workspace/Lang_15_fixed/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
index ed9dc3f..8db8abf 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -216,9 +216,9 @@ public class TypeUtils {
                 toClass, typeVarAssigns);
 
         // now to check each type argument
-        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {
-            Type toTypeArg = entry.getValue();
-            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
+        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
+            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
+            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);
 
             // parameters must either be absent from the subject type, within
             // the bounds of the wildcard type, or be an exact match to the
@@ -234,6 +234,18 @@ public class TypeUtils {
         return true;
     }
 
+    private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns) {
+        Type result;
+        do {
+            result = typeVarAssigns.get(var);
+            if (result instanceof TypeVariable<?> && !result.equals(var)) {
+                var = (TypeVariable<?>) result;
+                continue;
+            }
+            break;
+        } while (true);
+        return result;
+    }
 
     /**
      * <p> Checks if the subject type may be implicitly cast to the target
@@ -660,7 +672,7 @@ public class TypeUtils {
                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);
 
         // has target class been reached?
-        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
+        if (toClass.equals(cls)) {
             return typeVarAssigns;
         }
 
