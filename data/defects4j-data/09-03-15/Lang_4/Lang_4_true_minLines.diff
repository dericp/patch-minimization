diff --git a/home/dericp/workspace/Lang_4_fixed/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java b/home/dericp/workspace/Lang_4_buggy/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
index 9cf45f8..d6cb077 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
@@ -23,32 +23,32 @@ import java.util.HashMap;
 /**
  * Translates a value using a lookup table.
  *
  * @since 3.0
  * @version $Id$
  */
 public class LookupTranslator extends CharSequenceTranslator {
 
-    private final HashMap<String, CharSequence> lookupMap;
+    private final HashMap<CharSequence, CharSequence> lookupMap;
     private final int shortest;
     private final int longest;
 
     /**
      * Define the lookup table to be used in translation
      *
      * Note that, as of Lang 3.1, the key to the lookup table is converted to a 
      * java.lang.String, while the value remains as a java.lang.CharSequence. 
      * This is because we need the key to support hashCode and equals(Object), 
      * allowing it to be the key for a HashMap. See LANG-882.
      *
      * @param lookup CharSequence[][] table of size [*][2]
      */
     public LookupTranslator(final CharSequence[]... lookup) {
-        lookupMap = new HashMap<String, CharSequence>();
+        lookupMap = new HashMap<CharSequence, CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
-                this.lookupMap.put(seq[0].toString(), seq[1]);
+                this.lookupMap.put(seq[0], seq[1]);
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;
