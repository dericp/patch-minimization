diff --git a/home/dericp/workspace/Lang_4_buggy/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java b/home/dericp/workspace/Lang_4_fixed/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
index d6cb077..9cf45f8 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
@@ -23,31 +23,31 @@ import java.util.HashMap;
 /**
  * Translates a value using a lookup table.
  *
  * NOTE: This class is broken for any CharSequence implementation that does not define 
  *       equals(Object) and hashCode() methods as the class uses the CharSequence as 
  *       the key to a HashMap. See http://issues.apache.org/jira/browse/LANG-882.
  * 
  * @since 3.0
  * @version $Id$
  */
 public class LookupTranslator extends CharSequenceTranslator {
 
-    private final HashMap<CharSequence, CharSequence> lookupMap;
+    private final HashMap<String, CharSequence> lookupMap;
     private final int shortest;
     private final int longest;
 
     /**
      * Define the lookup table to be used in translation
      *
      * @param lookup CharSequence[][] table of size [*][2]
      */
     public LookupTranslator(final CharSequence[]... lookup) {
-        lookupMap = new HashMap<CharSequence, CharSequence>();
+        lookupMap = new HashMap<String, CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
-                this.lookupMap.put(seq[0], seq[1]);
+                this.lookupMap.put(seq[0].toString(), seq[1]);
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;
