diff --git a/home/dericp/workspace/Lang_19_buggy/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/home/dericp/workspace/Lang_19_fixed/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index ffd969f..3d4c238 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -33,7 +33,9 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        if(input.charAt(index) == '&' && index < (input.length() - 1) && input.charAt(index + 1) == '#') {
+        int seqEnd = input.length();
+        // Uses -2 to ensure there is something after the &#
+        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
@@ -41,10 +43,19 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+
+                // Check there's more than just an x after the &#
+                if(start == seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Note that this supports character codes without a ; on the end
+            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
+                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
+                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
+            {
                 end++;
             }
 
@@ -66,7 +77,10 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
             } else {
                 out.write(entityValue);
             }
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+
+            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
+
+            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
         }
         return 0;
     }
